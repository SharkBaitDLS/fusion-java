// Copyright (c) 2012 Amazon.com, Inc.  All rights reserved.

(use check)
(use 'fusion/list')
(use 'fusion/vector')

(define F (lambda (e) false))
(define T (lambda (e) true))


//==========================================================================
// first

(check = (first [1])    1)
(check = (first [1, 2]) 1)


//==========================================================================
// last

(check = (last [1])    1)
(check = (last [1, 2]) 2)


//==========================================================================
// find

(assert (is_void (find F [])))
(assert (is_void (find F [1, 2])))
(check = (find T [1, 2]) 1)

(check = (find (lambda (e) (= e "hi")) ["oh", "hi"]) "hi")


//==========================================================================
// any

(check_false (any T []))
(check_false (any F [1, 2]))
(check_true  (any T [1, 2]))

(check_true (any (lambda (e) (= e "hi")) ["oh", "hi"]))
(check_true (any (lambda (e) (= e "hi")) ["oh", "hi"]))


//==========================================================================
// map

(check_equal (map + []) [] "map1")
(check_equal (map + [1, 2]) [1, 2] "map2")
(check_equal (map (lambda (n) (+ 3 n)) [1, 2]) [4, 5] "map3")

(check_equal (choose T []) [] "filter1")
(check_equal (choose F []) [] "filter2")
(check_equal (choose T [1, 2]) [1, 2] "filter3")
(check_equal (choose F [1, 2]) [] "filter4")

(check_equal (choose (lambda (n) (< 10 n)) [1, 11, 10, 12]) [11, 12] "filter5")


//==========================================================================
// do

(check_equal (do (lambda (x) (+ 1 x)) [2, 3])
   (void) "do returns void")

(let [(v (stretchy_vector))]
  (do (lambda (x) (vector_add_m v (+ 1 x))) [2, 3])
  (check_equal v [3, 4] "do side effects"))
