// Copyright (c) 2022 Amazon.com, Inc.  All rights reserved.

// Corresponding Racket code is in rkt/macro_introduced_require.rkt

(require
  "/fusion/eval"
  "/fusion/experimental/check"
  "/fusion/namespace"
  "/fusion/parameter"
)

(require "/require_macro")

(require_grain_naive)
(expect_syntax_exn barley)

(require_grain_wrong)
(expect_syntax_exn barley)


// The "risky" macro has context on the both `require` and the module path.

(define (risky_barley enable_require)
  // Test top-level handling of `require_grain_risky` which is expected
  // to fail when `require` does not have its normal meaning.
  // That case is performed when `enable_require` is untruthy.
  (parameterize
    [(current_namespace (make_namespace_with_language "/fusion"))]
    (eval (quasiquote
            (begin
              (require "/require_macro")
              (unquote (or enable_require
                           (quote (define (require m) "HAHA"))))
              (require_grain_risky)
              barley)))))

// With `require` enabled, things work.
(check === (risky_barley true) "soup")

// With `require` disabled, we can't access the imported binding.
(expect_syntax_error (risky_barley false))


// Finally, doing it the right way.
(module test_require "/fusion"
  (require "/fusion/experimental/check"
           "/require_macro")
  (require_grain_best)
  (check === barley "soup"))
(require test_require)
