// Copyright (c) 2012 Amazon.com, Inc.  All rights reserved.

(use 'fusion/iterator')
(use 'fusion/list')
(use check)

(define check_iter
  (lambda (iter values)
    "Checks that the ITER produces the VALUES (given as a list)"
    (unless (is_iterator iter)
      (raise_argument_error "check_iter" "iterator" 0 iter values))
    (let ((len (size values)))
      (let loop ((i 0))
        (if (= i len)
          (assert (not (iterator_has_next iter)) "iterator should be empty")
          (begin
            (assert (iterator_has_next iter) "iterator should have next")
            (let ((actual   (iterator_next iter))
                  (expected (. values i)))
              (check_equal actual expected "iterator element")
              (loop (+ 1 i)))))))))

(check_iter empty_iterator [])

(check_iter (iterate_list [])      [])
(check_iter (iterate_list [1])     [1])
(check_iter (iterate_list [1, 2])  [1, 2])
(check_iter (iterate_list ["a", true])  ["a", true])
(check_iter (iterate_list [["a"], [true]])  [["a"], [true]])

(check_iter (iterate_value []) [[]])
(check_iter (iterate_value 509) [509])

(define plus1 (lambda (n) (+ 1 n)))

(check_iter (iterator_map plus1 empty_iterator) [])
(check_iter (iterator_map plus1 (iterate_list [1, 7])) [2, 8])


(check_iter (iterator_filter is_int empty_iterator) [])
(check_iter (iterator_filter is_int (iterate_value true)) [])
(check_iter (iterator_filter is_int (iterate_value 614)) [614])
(check_iter (iterator_filter is_int (iterate_list [true, 1, 2, false, 3])) [1,2,3])


(check_iter (iterator_append empty_iterator empty_iterator) [])
(check_iter (iterator_append empty_iterator (iterate_value 601)) [601])
(check_iter (iterator_append (iterate_value 616) empty_iterator) [616])
(check_iter (iterator_append (iterate_value 1) (iterate_value 2)) [1,2])
(check_iter (iterator_append (iterate_list [1,2,3]) (iterate_list [4,5]))
  [1,2,3,4,5])

(check_equal (iterator_to_list empty_iterator) [] "635")
(check_equal (iterator_to_list (iterate_list [1])) [1]  "1")
(check_equal (iterator_to_list (iterate_list [1,2])) [1,2]  "1,2")

(check_iter
  (iterator_map_splicing iterate_list empty_iterator)
  [])
(check_iter
  (iterator_map_splicing iterate_list (iterate_list [[1],[2,3],[],[4]]))
  [1,2,3,4])
