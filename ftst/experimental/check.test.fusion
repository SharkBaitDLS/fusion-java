// Copyright (c) 2014 Amazon.com, Inc.  All rights reserved.

(require
  "/fusion/exception"
  "/fusion/experimental/check"
)

(check = 1 1)
(check_pred is_truthy 12)


//==========================================================================
// check_true, check_false

(check_true true)
(check_true (quote a::true))

(expect_check_exn (check_true false))
(expect_check_exn (check_true 1))      // truthy but not true

(check_false false)
(check_false (quote a::false))

(expect_check_exn (check_false true))
(expect_check_exn (check_false null))      // untruthy but not false


//==========================================================================
// check_void

(check_void (void))
(expect_check_exn (check_void null))


//==========================================================================
// check_annotations

(check_annotations [] null)
(check_annotations (sexp) null)

(check_annotations ["a"] (quote a::null))

(check_annotations ["a", "b"]    (quote a::b::c))
(check_annotations (quote (a b)) (quote a::b::null))

(expect_check_exn
  (check_annotations ["b", "a"] (quote a::b::null)))

(check_compile_exn
  (check_annotations 2))


//==========================================================================
// define_check

(check_compile_exn (define_check))
(check_compile_exn (define_check () 1))
(check_compile_exn (define_check [check_foo] 1))
(check_compile_exn (define_check ("check_foo") 1))
(check_compile_exn (define_check ((check_foo)) 1))
(check_compile_exn (define_check (check_foo "arg") 1))
(check_compile_exn (define_check (check_foo "arg" arg) 1))
(check_compile_exn (define_check (check_foo arg "arg" arg) 1))

(define_check (check_foo0) 1)
(check_foo0)
(check_foo0 "message")
(check_compile_exn (check_foo0 "message" "extra"))

(define_check (check_foo1 arg) 1)
(check_foo1 1)
(check_foo1 1 "message")
(check_compile_exn (check_foo1))
(check_compile_exn (check_foo1 1 "message" "extra"))


(define_check (check_doc) "documentation" true)
(check_doc)


//==========================================================================
// expect_check_exn

(expect_check_exn (check = 1 2))
(expect_check_exn (expect_check_exn (check = 1 1)))


//==========================================================================
// expect_result_exn

(expect_result_exn (let_values [((x y) 1)] true))


//==========================================================================
// check_arity_exn

(check_compile_exn (check_arity_exn))
(check_compile_exn (check_arity_exn true "message" "extra"))

(check_arity_exn (pair 1))

(check_arity_exn
  (raise_arity_error "foo" 1))


//==========================================================================
// check_contract_exn

(check_contract_exn (raise_arity_error "foo" 1))

(check_contract_exn (pair 1))  // Arity    exn IS-A contract exn
(check_contract_exn (head 1))  // Argument exn IS-A contract exn

(expect_result_exn (let_values [((x y) 1)] true)) // Result exn is too


//==========================================================================
// check_compile_exn

(check_compile_exn (check_compile_exn))
(check_compile_exn (check_compile_exn true "message" "extra"))

(check_compile_exn (wrong_syntax (quote_syntax foo) "you are wrong"))
