// Copyright (c) 2013-2014 Amazon.com, Inc.  All rights reserved.

// Since the design for keywords isn't finalized, check that we can't use
// symbols of the form _keyword_ anywhere.
// We can't use them as bound names, nor as variable references.

(require
  "/fusion/eval"
  "/fusion/experimental/check"
  "/fusion/experimental/syntax")

// Keywords can't be used as argument names
(expect_compile_exn
  (lambda (_key_) 0))
(expect_compile_exn
  (lambda (_key_ arg) 0))
(expect_compile_exn
  (lambda (arg _key_) 0))
(expect_compile_exn
  (lambda (arg _key_ arg2) 0))
(expect_compile_exn
  (lambda _key_ 0))

(expect_compile_exn
  (let [(_v_ 1)] 0))
(expect_compile_exn
  (let [(x 1), (_v_ 1)] 0))
(expect_compile_exn
  (let _loop_ [(v 1)] 0))

(expect_compile_exn
  (letrec [(_v_ 1)] 0))
(expect_compile_exn
  (letrec [(x 1), (_v_ 1)] 0))

(expect_compile_exn
  (let_values [((_v_) 1)] 0))
(expect_compile_exn
  (let_values [((_v_ w) 1)] 0))


(expect_compile_exn
  (define _top_ 1))

(expect_compile_exn // exn:fail?
  (module M "/fusion"
    (define _top_ 1)))


(expect_compile_exn
  _key_)
(expect_compile_exn
  (begin _key_))
(expect_compile_exn
  (lambda () _key_))

(expect_compile_exn
  (lambda () ('#%top' _key_)))

// Not sure if this is what we really want long-term, but its current behavior
(check === (quote _k_) (. (quote [_k_]) 0))
(check_pred is_symbol (quote _k_))
(check === "a_k_z"
  (string_append "a" (quote _k_) "z"))

// I'm even less sure about this.
(check === "a_k_z"
  (string_append "a" (syntax_to_datum (quote_syntax _k_)) "z"))
