// Copyright (c) 2012 Amazon.com, Inc.  All rights reserved.

(module list 'fusion/base'

  // Enable java_new support
  (use 'fusion/ffi/java')
  (use 'fusion/experimental/defines')


  (defpub subseq         (java_new "com.amazon.fusion.IonSubseqProc"))
  (defpub list_intersect (java_new "com.amazon.fusion.ListIntersectProc"))


  (defpub first
    (lambda (list)
      '''
Returns the first element in the list
      '''
      (. list 0)))

  //==========================================================================

  (defpub last
    (lambda (list)
      '''
Returns the last element in the list
      '''
      (if (list_empty list) undef (. list (- (size list) 1)))))


  //==========================================================================

  (defpub list_tail
    (lambda (list from)
      '''
Returns the list after the first FROM elements of LIST.
      '''
      // TODO if 'from' is to large, error message has wrong proc name
      (subseq list from (size list))))

  //==========================================================================

  (defpub list_empty
    (lambda (list)
      '''
Returns true if list is empty otherwise returns false
      '''
      (= 0 (size list))))

  //==========================================================================


  // TODO not exported since the equality comparison contract is poorly defined.
  (define list_contains
    (lambda (list val)
      '''
Returns true if list contains value otherwise returns false
      '''
      (if (list_empty list)
        false
        (or (= val (first list))
            (list_contains (subseq list 1 (size list)) val)))))

) // end module
