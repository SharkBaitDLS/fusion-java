// Copyright (c) 2012 Amazon.com, Inc.  All rights reserved.

(module list 'fusion/base'

  (use 'fusion/experimental/defines')
  (use 'fusion/ffi/java')
  (use 'fusion/iterator')
  (use 'fusion/sequence')
  (use 'fusion/vector')

  // Pass-through bindings from #%kernel
  (provide is_list)

  // Pass-through bindings from /fusion/sequence
  (provide add any choose do find first is_empty last map size)

  (defpub_j concatenate_m   "com.amazon.fusion.ConcatenateMProc")
  (defpub_j subseq          "com.amazon.fusion.IonSubseqProc")
  // TODO FUSION-86 subseq - Needs to handle sexp


  // Renamings to merge vector back into list
  (defpub is_immutable_list is_immutable_vector)
  (defpub is_mutable_list is_mutable_vector)
  (defpub is_stretchy_list is_stretchy_vector)

  (defpub immutable_list immutable_vector)
  (defpub list vector)
  (defpub stretchy_list stretchy_vector)

  // TODO vector_ref, I'm not sure of the name yet, and `.` works for now.
  (defpub list_set vector_set)


  //==========================================================================
  // Adding and removing elements

  (defpub_j add_m "com.amazon.fusion.AddMProc")


  //==========================================================================
  // Iteration

  (defpub list_iterator vector_iterate)

  (defpub list_from_iterator
    (lambda (iterator)
      '''
Creates a list with the elements of `iterator`, in the same order.
      '''
      (unless (is_iterator iterator)
        (raise_argument_error "list_from_iterator" "iterator" 0 iterator))
      (let loop ((result (stretchy_vector)))
        (if (iterator_has_next iterator)
          (loop (vector_add_m result (iterator_next iterator)))
          result))))

) // end module
