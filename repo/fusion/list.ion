// Copyright (c) 2012 Amazon.com, Inc.  All rights reserved.

(module list 'fusion/base'

  (use 'fusion/experimental/defines')
  (use 'fusion/ffi/java')
  (use 'fusion/iterator')
  (use 'fusion/sequence')
  (use 'fusion/vector')

  // Pass-through bindings from #%kernel
  (provide is_list)

  // Pass-through bindings from /fusion/sequence
  (provide any choose do find first is_empty last map size subseq)

  (defpub_j concatenate_m   "com.amazon.fusion.ConcatenateMProc")

  // TODO FUSION-86 this is for DP compatability
  (defpub filter choose)


  (defpub is_immutable_list
    (lambda (v)
      (or (is_immutable_vector v)
          (and (is_list v) (not (is_vector v))))))

  // Renamings to merge vector back into list
  (defpub is_mutable_list is_mutable_vector)
  (defpub is_stretchy_list is_stretchy_vector)

  (defpub immutable_list immutable_vector)
  (defpub list vector)
  (defpub stretchy_list stretchy_vector)


  //==========================================================================

  // TODO FUSION-86 subseq should make 'to' arg optional
  (defpub list_tail
    (lambda (list from)
      '''
Returns the list after the first FROM elements of LIST.
      '''
      // TODO if 'from' is to large, error message has wrong proc name
      (subseq list from (size list))))


  //==========================================================================

  // TODO not exported since the equality comparison contract is poorly defined.
  (define list_contains
    (lambda (list val)
      '''
Returns true if list contains value otherwise returns false
      '''
      (if (= 0 (size list))
        false
        (or (= val (. list 0))
            (list_contains (subseq list 1 (size list)) val)))))


  //==========================================================================
  // Iteration

  // TODO I don't like how this is working...
  (define iterate_ion_seq (java_new "com.amazon.fusion.IterateListProc"))

  (defpub list_iterator
    (lambda (list)
      "Returns an iterator that produces the elements of a `list` (or vector)."
      (if (is_vector list)
        (vector_iterate list)
        (iterate_ion_seq list))))

  (defpub list_from_iterator
    (lambda (iterator)
      '''
Creates a list with the elements of `iterator`, in the same order.
      '''
      (unless (is_iterator iterator)
        (raise_argument_error "list_from_iterator" "iterator" 0 iterator))
      (let loop ((result (stretchy_vector)))
        (if (iterator_has_next iterator)
          (loop (vector_add_m result (iterator_next iterator)))
          result))))

) // end module
