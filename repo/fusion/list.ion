(module list 'fusion/base'

  (provide
    first
    last
    rest
    subseq
  )

  (define first
    (lambda (list)
      '''
Returns the first element in the list
      '''

     (. list 0)))

  //==========================================================================

  (define last
    (lambda (list)
      '''
Returns the last element in the list
      '''

     (if (= (size list) 0) undef (. list (- (size list) 1)))))

  //==========================================================================

  (define list_builder
   (lambda (list rslt idx end)
     '''
Helper method for rest - appends elements to the end of a result list until
the end of the original list is reached
      '''
     (if (= idx end) rslt
      (list_builder list (add rslt (. list idx)) (+ idx 1) end))))

  //==========================================================================

  (define rest
   (lambda (list idx)
     '''
Returns the rest of the list starting at index
      '''
      (if (or (= idx (size list)) (> idx (size list)))
       undef (list_builder list [] idx (size list)))))

  //==========================================================================

  (define subseq
   (lambda (list start end)
      '''
Returns the subsequence of a list in the range of two indices [start,end], inclusive
      '''
     (if (or (> start end) (= end (size list)) (> end (size list)))
      undef (list_builder list [] start (+ end 1)))))

) // end module
