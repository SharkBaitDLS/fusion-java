// Copyright (c) 2017 Amazon.com, Inc.  All rights reserved.

(module exception '/fusion'

  '''
Experimental exception raising and handling.

Existing exceptions such as those raised by `raise_argument_error` can be caught
using the provided `is_*_exn` predicates. They can be re-`raise`d but otherwise
provide no data for processing within `handler-expr`s.
  '''

  (require
    "/fusion/ffi/java"
    "/fusion/experimental/defines"
    "/fusion/experimental/syntax")

  (defpub_j raise
    '''
    (raise value)

Raises an exception with the `value` provided.

If the `value` is an exception, it is passed through.
    '''
    "com.amazon.fusion.RaiseProc")


  // THIS IS INTERNAL USE ONLY! DO NOT POKE
  (define __call_with_handler
    (java_new "com.amazon.fusion.CallWithHandlerProc"))

 (define (make_selector preds_and_handlers)
   (|e sentinel|
     (let loop [(phs preds_and_handlers)]
       (if (is_empty phs)
         sentinel
         (let [(ph (head phs))]
           (if ((head ph) e)
             ((tail ph) e)
             (loop (tail phs))))))))


  (defpub_syntax with_handlers
    '''
    (with_handlers ((pred_expr handler_expr) ...) body ...+)

Evaluates each `pred_expr` (predicate) and `handler_expr` (handler) in order,
and then the `body` forms.  The predicate and handler expressions must each
return a procedure that accepts one argument: a raised exception value.

If no exceptions are raised during evaluation of the body, then the result of
the `with_handlers` form is the result of the last `body` form.

If an exception is raised, then each predicate is applied to the exception
value. Once a predicate returns a truthy value, then the corresponding handler
is applied to the same value, and the handler's result becomes the result of
the entire `with_handlers` form. If the exception is not matched by any
predicate, then it is re-raised to the continuation of the `with_handlers`
expression.

Note, one should avoid using `(lambda (x) true)` as a condition because it
could potentially catch Errors, see the
[Racket Guide on Exceptions](https://docs.racket-lang.org/guide/exns.html) for more.
    '''
    (let [(ctx (quote_syntax here)),
          (wrong
            (lambda (stx)
              (wrong_syntax stx
                ''' Bad syntax for with_handlers; usage: '''
                ''' (with_handlers ((pred-expr handler-expr) ...) body ...+) ''')))]
      (lambda (stx)
        (when (< (syntax_size stx) 3)
          (wrong stx))
        (lets
          [(orig_args (tail (syntax_unwrap stx))),
           (body_thunk
             (pair
               (quote_syntax thunk)
               (tail orig_args))),
           (handler_args (let [(h (syntax_unwrap (head orig_args)))]
                           (if (is_sexp h) h
                             (if (is_list h) (apply sexp h)
                               (wrong stx))))),
           (ph_exprs
             (let loop [(phs handler_args)]
               (if (is_empty phs) (quote ())
                 (let [(ph (head phs))]
                   (if (=== 2 (syntax_size ph))
                     (pair (sexp (quote_syntax pair) (syntax_get ph 0) (syntax_get ph 1))
                       (loop (tail phs)))
                     (wrong_syntax ph
                       '''Bad syntax. Handler must be a pair of predicate and handler expressions.'''))
                   ))))
          ]
          (datum_to_syntax
            (sexp (quote_syntax __call_with_handler)  // (__call_with_handler
              body_thunk                              //   (thunk body ...+)
              (sexp (quote_syntax make_selector)      //   (make_selector
                (pair (quote_syntax sexp) ph_exprs))) //     (sexp (pair P H) ...)))
            ctx
            stx)))))


  (define FusionExn     (java_class "com.amazon.fusion.FusionException"))
  (define FusionUserExn (java_class "com.amazon.fusion.FusionUserException"))

  (defpub (is_exn v)
    '''
Determines whether a value is a Fusion exception.
    '''
    // This is special-case because we have to filter out non-exception values
    // that may have been raised.
    (and   (java_instance_of FusionExn     v)
      (not (java_instance_of FusionUserExn v))))


  (define_syntax generate_predicate
    (let [(ctx (quote_syntax here)),
          (message "A predicate for use with `with_handlers`. Does NOT work outside of a `with_handlers` form.")]
      (|stx|
        (lets
          [(orig_args (syntax_subseq stx 1)),
           (pred_name (syntax_get orig_args 0)),
           (exn_class (syntax_get orig_args 1)),]
          (datum_to_syntax
            (sexp (quote_syntax defpub) pred_name                         // (defpub predicate
              message                                                     //   message
              (quasisyntax (let [(Exn (java_class (unsyntax exn_class)))] //   (let [(Exn (java_class exn_class)]
                (|e| (java_instance_of Exn e)))))                         //     (|e| (java_instance_of Exn e))))
            ctx
            stx)))))

  (generate_predicate is_argument_exn "com.amazon.fusion.ArgumentException")

  (generate_predicate is_arity_exn "com.amazon.fusion.ArityFailure")

  // TODO is_check_exn shouldn't be built-in.
  (generate_predicate is_check_exn "com.amazon.fusion.CheckException")

  (generate_predicate is_contract_exn "com.amazon.fusion.ContractException")

  (generate_predicate is_result_exn "com.amazon.fusion.ResultFailure")

  (generate_predicate is_syntax_exn "com.amazon.fusion.SyntaxException")

)
