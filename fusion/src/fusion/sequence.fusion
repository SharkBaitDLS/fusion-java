// Copyright (c) 2012-2013 Amazon.com, Inc.  All rights reserved.

(module sequence '/fusion/base'

  '''
Ordered collections of values.

A _sequence_ is an ordered [collection](fusion/collection.html) of values,
keyed by non-negative integers.

The built-in sequence types are [list](fusion/list.html) and
[sexp](fusion/sexp.html).

Currently, some of these features may be restricted to a subset of sequence
types.
  '''

  (require
    "/fusion/collection"
    "/fusion/exception"
    "/fusion/experimental/defines"
    "/fusion/private/builtins"   // Some basic list ops
    "/fusion/private/sexp"
    "/fusion/procedure"
    "/fusion/unsafe/list"
    "/fusion/unsafe/sexp")

  // Pass-through bindings from /fusion/collection
  (provide . any do element elt every find has_key is_empty size)


  (defpub_j add    "com.amazon.fusion.AddProc")

  (defpub is_sequence
    '''
    (is_sequence value)

Determines whether `value` is a sequence, returning `true` or `false`.
    '''
    (disjoin is_list is_sexp))


  (defpub first
    (lambda (sequence)
      '''
Returns the first element in the `sequence`. Fails if the sequence has no
elements.
      '''
      (if (= 0 (size sequence))
        (raise_argument_error "first" "non-empty sequence" 0 sequence)
        (. sequence 0))))


  (defpub last
    (lambda (sequence)
      '''
Returns the last element in the `sequence`. Fails if the sequence has no
elements.
      '''
      (let [(s (size sequence))]
        (if (= 0 s)
          (raise_argument_error "last" "non-empty sequence" 0 sequence)
          (. sequence (- s 1))))))


  //==========================================================================
  // Mapping, searching, etc.

  // Name per Dylan.  I prefer `choose` over `filter` because the latter is
  // ambiguous whether you're filtering "in" or "out".
  (defpub choose
    (lambda (pred sequence)
      '''
Applies the one-parameter predicate `pred` to each element of `sequence`,
returning a new sequence of the same type, containing the elements (in order)
for which `pred` returns truthy.
      '''
      (cond
        ((is_list sequence)
          (let [(len (size sequence))]
            (let loop [(i 0),
                       (result (stretchy_list))]
              (if (= i len)
                result
                (let [(elt (. sequence i))]
                  (loop
                    (+ 1 i)
                    (if (pred elt)
                      (unsafe_list_add_m result elt)
                      result)))))))
        ((is_sexp sequence)
          (let loop [(ptr sequence)]
            (if (is_empty ptr)
              (quote ())
              (let [(v (unsafe_pair_head ptr))]
                (if (pred v)
                  (pair v (loop (unsafe_pair_tail ptr)))
                  (loop (unsafe_pair_tail ptr)))))))
        (true
          (raise_argument_error "choose" "sequence" 1 pred sequence)))))



  // Name per Dylan and SRFI-1. Dylan allows mapping over multiple key-value
  // collections but that's a bit crazy and it's unclear how useful that is.
  (defpub map
    (lambda (proc sequence)
      '''
Applies the one-parameter procedure `proc` to each element of `sequence`,
returning a new sequence of the same type, containing the results in order.
      '''
      (cond
        ((is_list sequence)
          (let [(len (size sequence))]
            (let loop [(i 0),
                       (result (stretchy_list))]
              (if (= i len)
                result
                (loop
                  (+ 1 i)
                  (unsafe_list_add_m result (proc (. sequence i))))))))
        ((is_sexp sequence)
          (let loop [(ptr sequence)]
            (if (is_empty ptr)
              (quote ())
              (pair
                (proc (unsafe_pair_head ptr))
                (loop (unsafe_pair_tail ptr))))))
        (true
          (raise_argument_error "map" "sequence" 1 proc sequence)))))
)
