// Copyright (c) 2012 Amazon.com, Inc.  All rights reserved.

(module check 'fusion/base'

  (use 'fusion/experimental/defines')
  (use 'fusion/ion')
  (use 'fusion/vector')


  (defpub check_equal
    (lambda (actual expected descr)
      (cond
        ((is_undef expected)
         (assert (is_undef actual)
           descr " not equal.\nActual: " actual "\nExpected: " expected))
        ((is_list expected)
         (check_list_equal actual expected))
        ((is_vector expected)
         (check_vector_equal actual expected))
        (true
         (assert (= actual expected)
           descr " not equal.\nActual: " actual "\nExpected: " expected)))))

  (defpub check_list_equal
    (lambda (actual expected)
      (assert (is_list actual) "expected list, received: " actual)
      (assert (= (size actual) (size expected))
        "list lengths don't match. Actual: " actual " Expected: " expected)
      (let loop ((i 0))
        (when (< i (size actual))
          (check_equal (. actual i) (. expected i) "list element") // TODO bad descr
          (loop (+ 1 i))))))

  (defpub check_vector_equal
    (lambda (actual expected)
      (assert (is_vector actual) "expected vector, received: " actual)
      (assert (= (vector_size actual) (vector_size expected))
        "vector sizes don't match. Actual: " actual " Expected: " expected)
      (let loop ((i 0))
        (when (< i (vector_size actual))
          (check_equal (vector_ref actual i) (vector_ref expected i)
            "vector element") // TODO bad descr
          (loop (+ 1 i))))))


  (defpub check_annotations
    (lambda (value expected)
      (let ((anns (ion_annotations value)))
        (check_list_equal anns expected))))

)
